kind: Service
apiVersion: v1
metadata:
  name: redis-headless
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
  - name: client
    port: 6379
  - name: bus
    port: 16379
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis-headless
  replicas: 6
  podManagementPolicy: Parallel
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 1Gi
  template:
    metadata:
      annotations:
        logflow.io/parser: |-
          format=/^(?P<pid>\d*):(?P<role>.) (?P<timestamp>\S* \S* \S* \S*) (?P<level>.) (?P<message>.*)$/
          message_key=message
          timestamp_key=timestamp
          timestamp_layout=02 Jan 2006 15:04:05.999
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
        runAsNonRoot: true
      volumes:
      - name: config
        configMap:
          name: redis
      - name: auth
        configMap:
          name: redis-auth
          optional: true
      - name: tls
        secret:
          secretName: redis-tls
          optional: true
      - name: tls-config
        configMap:
          name: redis-tls
          optional: true
      containers:
      - name: redis
        image: redis:6.0.3
        ports:
        - name: client
          containerPort: 6379
        - name: bus
          containerPort: 16379
        envFrom:
        - secretRef:
            name: redis-auth
            optional: true
        command:
        - bash
        - -ce
        - |
          set -o pipefail
          if [ ! -f /data/conf/redis.conf ]; then
            HOST=$(hostname -s)
            DOMAIN=$(hostname -d | cut -d. -f2-)
            until getent hosts $HOST.$DOMAIN >/dev/null 2>&1; do
                echo dns entry is not yet resolvable. waiting...
                sleep 2
            done
            SERVICE_IP=$(getent hosts $HOST.$DOMAIN | awk '{ print $1 }')
            cp /tmp/config/redis.conf /tmp/redis.conf
            if [ -f /tmp/auth/redis.conf ]; then
                echo >> /tmp/redis.conf
                cat /tmp/auth/redis.conf >> /tmp/redis.conf
            fi
            if [ -f /tmp/tls/redis.conf ]; then
                echo >> /tmp/redis.conf
                cat /tmp/tls/redis.conf >> /tmp/redis.conf
            fi
            sed -i -e "s/\${SERVICE_IP}/$SERVICE_IP/g" \
                   -e "s/\${REDIS_PASSWORD}/$REDIS_PASSWORD/g" \
                   /tmp/redis.conf
            mkdir -p /data/conf /data/db
            mv /tmp/redis.conf /data/conf/redis.conf
          fi
          exec "$@"
        - --
        args:
        - redis-server
        - /data/conf/redis.conf
        volumeMounts:
        - name: config
          mountPath: /tmp/config
        - name: auth
          mountPath: /tmp/auth
        - name: tls
          mountPath: /tls
        - name: tls-config
          mountPath: /tmp/tls
        - name: datadir
          mountPath: /data
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          exec:
            command:
            - bash
            - -ce
            - |
              if [ "$REDIS_PASSWORD" != "" ]; then
                  auth="--pass ${REDIS_PASSWORD}"
              fi
              if [ -f /tls/tls.key ]; then
                  tls="--tls --cacert /tls/tls.crt"
              fi
              test "$(redis-cli $tls $auth ping)" == "PONG"
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          exec:
            command:
            - bash
            - -ce
            - |
              if [ "$REDIS_PASSWORD" != "" ]; then
                  auth="--pass ${REDIS_PASSWORD}"
              fi
              if [ -f /tls/tls.key ]; then
                  tls="--tls --cacert /tls/tls.crt"
              fi
              test "$(redis-cli $tls $auth ping)" == "PONG"
