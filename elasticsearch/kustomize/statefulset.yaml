apiVersion: v1
kind: Service
metadata:
  name: es-headless
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: es-pdb
spec:
  minAvailable: 2
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: es
spec:
  serviceName: es-headless
  replicas: 3
  podManagementPolicy: Parallel
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  template:
    spec:
      terminationGracePeriodSeconds: 120
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels: {}
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: sysctl
        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
        command: [ "sysctl", "-w", "vm.max_map_count=262144" ]
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: es
        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: cluster.name
          value: elasticsearch
        - name: cluster.initial_master_nodes
          value: es-0,es-1,es-2
        - name: discovery.seed_hosts
          value: es-headless
        - name: ES_JAVA_OPTS
          value: -Xmx1g -Xms1g
        volumeMounts:
        - name: datadir
          mountPath: /usr/share/elasticsearch/data
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
        readinessProbe:
          initialDelaySeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
          exec:
            command:
            - bash
            - -c
            - |
              set -e

              # If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )
              # Once it has started only check that the node itself is responding
              START_FILE=/tmp/.es_start_file

              if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
              else
                BASIC_AUTH=''
              fi

              if [ -f "${START_FILE}" ]; then
                echo 'Elasticsearch is already running, lets check the node is healthy'
                HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)
                RC=$?
                if [[ ${RC} -ne 0 ]]; then
                  echo "curl -XGET -s -k \${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}"
                  exit ${RC}
                fi
                # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                if [[ ${HTTP_CODE} == "200" ]]; then
                  exit 0
                else
                  echo "curl -XGET -s -k \${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                  exit 1
                fi
              else
                echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green&timeout=1s ; then
                  touch ${START_FILE}
                  exit 0
                else
                  echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                  exit 1
                fi
              fi
