apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
  - name: mongodb
    port: 27017
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: mongodb
  replicas: 3
  podManagementPolicy: Parallel
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 2Gi
  template:
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsUser: 999
        fsGroup: 999
        runAsNonRoot: true
      volumes:
      - name: config
        configMap:
          name: mongodb
      - name: auth
        emptyDir: {}
      - name: tls
        secret:
          secretName: mongodb-tls
          optional: true
      containers:
      - name: mongodb
        image: mongo:4.2.6
        ports:
        - name: mongodb
          containerPort: 27017
        env:
        - name: REPLICAS
          value: "3" # should match Statefulset.spec.replicas
        - name: REPLSET
          value: "rs0"
        envFrom:
        - secretRef:
            name: mongodb-auth
            optional: true
        command:
        - bash
        - -ce
        - |
          if [ -n "$keyfile" -a ! -f /etc/mongoauth/keyfile ]; then
              printenv keyfile > /etc/mongoauth/keyfile
              chmod 400 /etc/mongoauth/keyfile
              auth="--keyFile=/etc/mongoauth/keyfile"
          fi
          if [ -f /etc/mongotls/tls.key ]; then
              cat /etc/mongotls/tls.key /etc/mongotls/tls.crt > /tmp/mongodb.pem
              tls="--tlsMode requireTLS --tlsCertificateKeyFile /tmp/mongodb.pem"
          fi
          exec mongod $auth $tls "$@"
        - --
        args:
        - --config=/etc/mongod.conf
        - --replSet=$(REPLSET)
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -ce
              - |
                HOST=$(hostname -s)
                DOMAIN=$(hostname -d)
                if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
                    NAME=${BASH_REMATCH[1]}
                    ORD=${BASH_REMATCH[2]}
                else
                    echo "Failed to parse hostname $HOST"
                    exit 1
                fi

                # skip if ordinal is not zero
                if [ "$ORD" != "0" ]; then
                    exit 0
                fi

                if [ -f /etc/mongotls/tls.crt ]; then
                    tls="--tls --tlsAllowInvalidHostnames --tlsCAFile /etc/mongotls/tls.crt"
                fi

                # wait until servers are ready
                for i in $(seq 0 $((REPLICAS-1))); do
                    until mongo $tls --host "$NAME-$i.$DOMAIN" --eval quit > /dev/null 2>&1; do
                        echo "$NAME-$i not ready yet. waiting..."
                        sleep 5
                    done
                done

                cat <<EOF > /tmp/init.js
                db = db.getSiblingDB("admin")
                var resp = rs.status()
                printjson(resp)
                if(resp.code!=94) {
                    print("already configured")
                    quit(0)
                }

                print("initiating replicaSet...")
                resp = rs.initiate({
                    _id: "${REPLSET}",
                    members: [
                        { _id: 0, host: "$NAME-0.$DOMAIN" }
                    ]
                })
                printjson(resp)
                if(!resp.ok) {
                    quit(2)
                }
                while(rs.status().members[0].stateStr!="PRIMARY"){
                    print("$HOST is not yet become primary. waiting...")
                    sleep(2000)
                }
                if("$ROOT_PASSWORD"!="") {
                    db.createUser({
                        user: "root",
                        pwd: "$ROOT_PASSWORD",
                        roles: [ { role: "root", db: "admin" } ]
                    })
                    if(db.auth("root", "$ROOT_PASSWORD")!=1) {
                        quit(100)
                    }
                }
                for(i=1; i<$REPLICAS; i++){
                    print("adding replica "+i+"...")
                    resp = rs.add("$NAME-"+i+".$DOMAIN")
                    printjson(resp)
                    if(!resp.ok) {
                        quit(2+i)
                    }
                }
                EOF
                mongo $tls /tmp/init.js
        volumeMounts:
        - name: config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: auth
          mountPath: /etc/mongoauth
        - name: tls
          mountPath: /etc/mongotls
        - name: datadir
          mountPath: /data
        readinessProbe:
          initialDelaySeconds: 5
          exec:
            command:
            - bash
            - -ce
            - |
              if [ -f /etc/mongotls/tls.crt ]; then
                  tls="--tls --tlsAllowInvalidHostnames --tlsCAFile /etc/mongotls/tls.crt"
              fi
              mongo $tls --eval "db.adminCommand('ping')"
        livenessProbe:
          initialDelaySeconds: 5
          exec:
            command:
            - bash
            - -ce
            - |
              if [ -f /etc/mongotls/tls.crt ]; then
                  tls="--tls --tlsAllowInvalidHostnames --tlsCAFile /etc/mongotls/tls.crt"
              fi
              mongo $tls --eval "db.adminCommand('ping')"
